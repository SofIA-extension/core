#!/bin/bash

# Dégradé de rouge (code 196) à jaune (code 226)
colors=(196 202 208 214 220 226 226 226 226)

# Lire le logo depuis un here document
mapfile -t ascii_art << 'EOF'
_____/\\\\\\\\\\\________________________/\\\\\______________________________
____/\\\/////////\\\____________________/\\\///______________________________
____\//\\\______\///____________________/\\\_______/\\\______________________
______\////\\\_____________/\\\\\_____/\\\\\\\\\___\///___/\\\\\\\\\_________
__________\////\\\________/\\\///\\\__\////\\\//_____/\\\_\////////\\\_______
______________\////\\\____/\\\__\//\\\____\/\\\______\/\\\___/\\\\\\\\\\_____
________/\\\______\//\\\__\//\\\__/\\\_____\/\\\______\/\\\__/\\\/////\\\____
________\///\\\\\\\\\\\/____\///\\\\\/______\/\\\______\/\\\_\//\\\\\\\\/\\__
___________\///////////________\/////________\///_______\///___\////////\//__
EOF

# Appliquer le gradient ligne par ligne
for i in "${!ascii_art[@]}"; do
    color=${colors[i % ${#colors[@]}]}
    printf "\e[38;5;%sm%s\e[0m\n" "$color" "${ascii_art[$i]}"
done


# Fonction pour lancer une application avec des logs simplifiés
launch_app() {
    local app_name="$1"
    local directory="$2"
    local command="$3"
    local log_icon="$4"
    local current_dir=$(pwd)
    
    echo "${log_icon} Lancement de ${app_name}..."
    cd "${directory}" || { echo "❌ Erreur: Dossier ${directory} introuvable"; return 1; }
    
    # Lancer l'application en arrière-plan sans afficher tous les logs
    eval "${command}" > /dev/null 2>&1 &
    local pid=$!
    
    # Revenir au dossier initial
    cd "${current_dir}"
    
    # Vérifier si le processus démarre correctement
    sleep 1
    if kill -0 "$pid" 2>/dev/null; then
        echo "✅ ${app_name} démarré avec succès (PID: $pid)"
    else
        echo "❌ ${app_name} a échoué au démarrage"
    fi
}

# Vérifier si l'argument "start" est fourni
if [ "$1" = "start" ]; then
    echo "🚀 Démarrage de SofIA..."
    echo ""
    
    # Vérifier et tuer les processus sur le port 3001
    echo "🔍 Vérification du port 3001..."
    if lsof -ti:3001 > /dev/null 2>&1; then
        echo "⚠️  Port 3001 occupé, arrêt des processus..."
        pkill -f "PORT=3001" || true
        sleep 2
    fi
    
    # Lancer le serveur MCP (depuis core)
    launch_app "MCP Server" "../intuition-mcp-server" "pnpm run start:http" "🛜"
    
    # Attendre un peu avant de lancer le suivant
    sleep 2
    
    # Lancer ElizaOS (depuis core)
    launch_app "ElizaOS" "SofIA/agent1" "elizaos start" "💁"
    
    # Attendre un peu avant de lancer le suivant
    sleep 2
    
    # Activer l'agent (depuis core)
    launch_app "Agent Activation" "SofIA/agent1" "elizaos agent start --path SofIA.json" "🤖"
    
    # Attendre un peu avant de lancer le suivant
    sleep 2
    
    # Lancer le build de l'extension (depuis core) - en mode visible
    echo "📱 Lancement du build de l'extension..."
    cd "SofIA/extension" || { echo "❌ Erreur: Dossier SofIA/extension introuvable"; exit 1; }
    
    # Lancer le build en mode visible pour voir le progrès
    if npm run build; then
        echo "✅ Extension build terminé avec succès"
    else
        echo "❌ Extension build a échoué"
    fi
    
    # Revenir au dossier initial
    cd "../../"
    
    echo ""
    echo "✅ Toutes les applications ont été lancées!"
    echo "📝 Pour arrêter toutes les applications, utilisez Ctrl+C"
    echo ""
    
    # Attendre que toutes les tâches de fond se terminent
    wait
else
    echo "Usage: ./sofia start"
    echo "Ce script lance toutes les applications SofIA en parallèle."
fi